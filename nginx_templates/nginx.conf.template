worker_processes 1;

user nobody nogroup;
error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log combined;

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response
    server webapp:8000 fail_timeout=0;
    keepalive 2;
  }

  # redirect http to https
  server {
    listen 80;
    return 301 https://${NGINX_HOST}$request_uri;
  }

  server {
    listen 443 ssl http2;
    ssl_certificate     ${SSL_CERT_PATH};
    ssl_certificate_key ${SSL_KEY_PATH};
    
    client_max_body_size 1G;
    server_name ${NGINX_HOST};

    keepalive_timeout 5;

    # path for static files
    root /static/;

    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
      proxy_set_header Host $http_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_redirect off;
      # proxy_buffering off;
      proxy_pass http://app_server;
    }
  }
}