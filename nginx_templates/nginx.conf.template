upstream app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response
  server webapp:8000 fail_timeout=0;
  keepalive 2;
}

# redirect http to https
server {
  listen 80 default_server;
  server_name ${NGINX_HOST};
  return 301 https://${NGINX_HOST}$request_uri;
}

# Cache directory for reverse proxy
proxy_cache_path /var/cache/nginx keys_zone=app_cache:10m;

# HTTPS server
server {
  # For debugging in development
  #error_log  /var/log/nginx/error.log debug;
  
  # listen on HTTPS port with SSL enabled
  listen 443 ssl http2;
  ssl_certificate     ${SSL_CERT_PATH};
  ssl_certificate_key ${SSL_KEY_PATH};
  
  client_max_body_size 1G;
  server_name ${NGINX_HOST};

  keepalive_timeout 5;

  location / {
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_redirect off;
    proxy_buffering off;
    proxy_pass http://app_server;
  }

  location /static {
    alias /static/;
  }

  # Set proxy cache
  proxy_cache app_cache;
  proxy_cache_key $scheme://$host$request_uri$is_args$query_string;
  proxy_cache_valid 200 10m;
  proxy_cache_bypass $arg_should_bypass_cache;
  proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504 http_429;
  proxy_cache_lock on;
}

map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}